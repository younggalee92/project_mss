plugins {
    id 'org.springframework.boot' version '3.0.3'
    id 'io.spring.dependency-management' version '1.1.0'
}

allprojects {
    group = "com.younggal.project"
    version = "0.0.1-SNAPSHOT"

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = "17"

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        // dto
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.modelmapper:modelmapper:2.4.3'
        implementation 'org.springframework.boot:spring-boot-starter-validation'


        // db
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'com.mysql:mysql-connector-j'
        implementation 'org.hibernate.validator:hibernate-validator'

        // querydsl
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        // swagger
        implementation "org.springdoc:springdoc-openapi-ui:1.6.9"
        implementation "org.springdoc:springdoc-openapi-data-rest:1.6.9"

        // etc
        implementation 'org.apache.tika:tika-core:1.27'
    }

    //tasks.named('test') {
    //    useJUnitPlatform()
    //}

    def querydslDir = "$buildDir/generated/querydsl"
    sourceSets {
        main.java.srcDirs += [ querydslDir ]
    }
    tasks.withType(JavaCompile) {
        options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
    }
    clean.doLast {
        file(querydslDir).deleteDir()
    }
}

project(":module-core") {
    // module-core 는 패키징이 필요 없음.
    bootJar { enabled = false }
    jar { enabled = true }

    dependencies {
    }
}

project(":module-admin") {
    dependencies {
        implementation(project(":module-core"))
    }
}

project(":module-user") {
    dependencies {
        implementation(project(":module-core"))
    }
}